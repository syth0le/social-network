version: "3.9"

services:
  nginx:
    container_name: "nginx"
    image: nginx:latest
    volumes:
      - ./infra/nginx/nginx.conf:/etc/nginx/nginx.conf:ro
#      - ./infra/nginx/logs:/var/log/nginx
    depends_on:
      - backend
      - backend-2
      - backend-3
    ports:
      - "80:80"
      - "7075:7075"
    networks:
      - social_network_net

  backend:
    container_name: "social-network"
    build:
      context: .
    command: "/usr/local/bin/social-network --config=/usr/src/app/cmd/social-network/local_config.yaml"
    restart: always
    ports:
      - "8080:8080"
      - "8081:8081"
      - "7070:7070"
    env_file:
      - .env
    environment:
      - DB_PASSWORD=${DB_PASSWORD}
      - JWT_TOKEN_SALT=${JWT_TOKEN_SALT}
    depends_on:
      master:
        condition: service_healthy
      migrate:
        condition: service_completed_successfully
      slave:
        condition: service_healthy
      migrate-slave:
        condition: service_completed_successfully
      message-broker:
          condition: service_healthy
    volumes:
      - .:/usr/src/app
    networks:
      - social_network_net
      - realtime-notification-service_notifications_net
      - dialog-service_dialog_net
    external_links:
      - notifications-broker:notifications-broker
      - backend:backend
  backend-2:
    container_name: "social-network-2"
    build:
      context: .
    command: "/usr/local/bin/social-network --config=/usr/src/app/cmd/social-network/local_config.yaml"
    restart: always
    ports:
      - "8082:8080"
      - "8083:8081"
      - "7071:7070"
    env_file:
      - .env
    environment:
      - DB_PASSWORD=${DB_PASSWORD}
      - JWT_TOKEN_SALT=${JWT_TOKEN_SALT}
    depends_on:
      - backend
    volumes:
      - .:/usr/src/app
    networks:
      - social_network_net
      - realtime-notification-service_notifications_net
      - dialog-service_dialog_net
    external_links:
      - notifications-broker:notifications-broker
      - backend:backend
  backend-3:
    container_name: "social-network-3"
    build:
      context: .
    command: "/usr/local/bin/social-network --config=/usr/src/app/cmd/social-network/local_config.yaml"
    restart: always
    ports:
      - "8084:8080"
      - "8085:8081"
      - "7072:7070"
    env_file:
      - .env
    environment:
      - DB_PASSWORD=${DB_PASSWORD}
      - JWT_TOKEN_SALT=${JWT_TOKEN_SALT}
    depends_on:
      - backend-2
    volumes:
      - .:/usr/src/app
    networks:
      - social_network_net
      - realtime-notification-service_notifications_net
      - dialog-service_dialog_net
    external_links:
      - notifications-broker:notifications-broker
      - backend:backend
  master:
    image: postgres:latest
    container_name: "master"
    env_file:
      - .env
    volumes:
      - postgres-db-master:/var/lib/postgresql/data
    environment:
      - POSTGRES_DB=social-network-local
      - POSTGRES_NAME=social-network-local
      - POSTGRES_USER=social-network-local-admin
      - POSTGRES_PASSWORD=${DB_PASSWORD}
    ports:
      - "6432:5432"
    healthcheck:
      test: [ "CMD-SHELL", "pg_isready" ]
      interval: 10s
      timeout: 5s
      retries: 5
      start_period: 10s
    restart: always
    networks:
      - social_network_net
    external_links:
      - master-exporter:master-exporter
  migrate:
    image: migrate/migrate
    container_name: "migrate"
    command: ["-path", "/migrations", "-database",  "postgresql://social-network-local-admin:eephayl3eaph8Xo@master:5432/social-network-local?sslmode=disable", "up"]
    networks:
      - social_network_net
    depends_on:
      master:
        condition: service_healthy # needful setting which wait available postgres host
    volumes:
      - ./migrations:/migrations
  slave:
    image: postgres:latest
    container_name: "slave"
    env_file:
      - .env
    volumes:
      - postgres-db-slave:/var/lib/postgresql/data
    environment:
      - POSTGRES_DB=social-network-local
      - POSTGRES_NAME=social-network-local
      - POSTGRES_USER=social-network-local-admin
      - POSTGRES_MASTER_HOST=master
      - POSTGRES_MASTER_PORT=6432
      - POSTGRES_PASSWORD=${DB_PASSWORD}
    ports:
      - "4432:5432"
    healthcheck:
      test: [ "CMD-SHELL", "pg_isready" ]
      interval: 10s
      timeout: 5s
      retries: 5
      start_period: 10s
    depends_on:
      - master
    restart: always
    networks:
      - social_network_net
  migrate-slave:
    image: migrate/migrate
    container_name: "slave-migrate"
    command: [ "-path", "/migrations", "-database",  "postgresql://social-network-local-admin:eephayl3eaph8Xo@slave:5432/social-network-local?sslmode=disable", "up" ]
    networks:
      - social_network_net
    depends_on:
      master:
        condition: service_healthy # needful setting which wait available postgres host
    volumes:
      - ./migrations:/migrations

  slave-2:
    image: postgres:latest
    container_name: "slave-2"
    env_file:
      - .env
    volumes:
      - postgres-db-slave-2:/var/lib/postgresql/data
    environment:
      - POSTGRES_DB=social-network-local
      - POSTGRES_NAME=social-network-local
      - POSTGRES_USER=social-network-local-admin
      - POSTGRES_MASTER_HOST=master
      - POSTGRES_MASTER_PORT=6432
      - POSTGRES_PASSWORD=${DB_PASSWORD}
    ports:
      - "3432:5432"
    healthcheck:
      test: [ "CMD-SHELL", "pg_isready" ]
      interval: 10s
      timeout: 5s
      retries: 5
      start_period: 10s
    depends_on:
      - master
    restart: always
    networks:
      - social_network_net
  migrate-slave-2:
    image: migrate/migrate
    container_name: "slave-migrate-2"
    command: [ "-path", "/migrations", "-database",  "postgresql://social-network-local-admin:eephayl3eaph8Xo@slave-2:5432/social-network-local?sslmode=disable", "up" ]
    networks:
      - social_network_net
    depends_on:
      master:
        condition: service_healthy # needful setting which wait available postgres host
    volumes:
      - ./migrations:/migrations

  cache:
    build:
      context: infra/redis
      dockerfile: Dockerfile
    container_name: redis-cache
    image: redis:7.2.5
    ##    for debugging
    ports:
      - "6379:6379"
    volumes:
      - redis-cache-data:/data
    networks:
      - social_network_net
  message-broker:
    image: rabbitmq:3-management-alpine
    container_name: message-broker
    ports:
      - "5672:5672"   # for sender and consumer connections
      - "15672:15672" # for serve RabbitMQ GUI
    volumes:
      - message-broker-data:/var/lib/rabbitmq
      - message-broker-data-log:/var/log/rabbitmq
    restart: always
    networks:
      - social_network_net
    healthcheck:
      test: [ "CMD", "rabbitmqctl", "status" ]
      interval: 5s
      timeout: 15s
      retries: 5
  tarantool:
    image: tarantool/tarantool:2.11.3
    container_name: "tarantool"
    command: tarantool /opt/tarantool/init.lua
    networks:
      - social_network_net
    ports:
      - "3301:3301"
    volumes:
      - ./infra/tarantool/conf/init.lua:/opt/tarantool/init.lua
      - ./infra/tarantool/conf/config.yml:/etc/tarantool/config.yml
      - tarantool:/var/lib/postgresql/data
    environment:
      TARANTOOL_USER_NAME: admin
      TARANTOOL_USER_PASSWORD: password

volumes:
  postgres-db-master:
  postgres-db-slave:
  postgres-db-slave-2:
  redis-cache-data:
  message-broker-data:
  message-broker-data-log:
  tarantool:

networks:
  social_network_net:
    driver: bridge
    ipam:
      driver: default
      config:
        - subnet: 172.16.1.0/24
  realtime-notification-service_notifications_net:
    external: true
  dialog-service_dialog_net:
    external: true